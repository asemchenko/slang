Terminals unused in grammar

   TOK_OPEN_BRACE
   TOK_CLOSE_BRACE


Grammar

    0 $accept: input $end

    1 input: expression
    2      | ERROR

    3 expression: IDENTIFIER
    4           | literal
    5           | TOK_OPEN_BRACKET expression TOK_CLOSE_BRACKET
    6           | expression TOK_PLUS expression
    7           | expression TOK_MINUS expression
    8           | expression TOK_MULTIPLY expression
    9           | expression TOK_DIVIDE expression
   10           | expression TOK_MODULO expression
   11           | TOK_NOT expression
   12           | expression TOK_POW expression

   13 literal: INT_LITERAL
   14        | FLOAT_LITERAL
   15        | BOOL_LITERAL
   16        | STRING_LITERAL
   17        | CHAR_LITERAL


Terminals, with rules where they appear

$end (0) 0
error (256)
TOK_PLUS (258) 6
TOK_MINUS (259) 7
TOK_MULTIPLY (260) 8
TOK_DIVIDE (261) 9
TOK_MODULO (262) 10
TOK_POW (263) 12
TOK_NOT (264) 11
INT_LITERAL (265) 13
FLOAT_LITERAL (266) 14
BOOL_LITERAL (267) 15
TOK_OPEN_BRACKET (268) 5
TOK_CLOSE_BRACKET (269) 5
IDENTIFIER (270) 3
STRING_LITERAL (271) 16
CHAR_LITERAL (272) 17
ERROR (273) 2
TOK_OPEN_BRACE (274)
TOK_CLOSE_BRACE (275)


Nonterminals, with rules where they appear

$accept (21)
    on left: 0
input (22)
    on left: 1 2, on right: 0
expression (23)
    on left: 3 4 5 6 7 8 9 10 11 12, on right: 1 5 6 7 8 9 10 11 12
literal (24)
    on left: 13 14 15 16 17, on right: 4


State 0

    0 $accept: . input $end

    TOK_NOT           shift, and go to state 1
    INT_LITERAL       shift, and go to state 2
    FLOAT_LITERAL     shift, and go to state 3
    BOOL_LITERAL      shift, and go to state 4
    TOK_OPEN_BRACKET  shift, and go to state 5
    IDENTIFIER        shift, and go to state 6
    STRING_LITERAL    shift, and go to state 7
    CHAR_LITERAL      shift, and go to state 8
    ERROR             shift, and go to state 9

    input       go to state 10
    expression  go to state 11
    literal     go to state 12


State 1

   11 expression: TOK_NOT . expression

    TOK_NOT           shift, and go to state 1
    INT_LITERAL       shift, and go to state 2
    FLOAT_LITERAL     shift, and go to state 3
    BOOL_LITERAL      shift, and go to state 4
    TOK_OPEN_BRACKET  shift, and go to state 5
    IDENTIFIER        shift, and go to state 6
    STRING_LITERAL    shift, and go to state 7
    CHAR_LITERAL      shift, and go to state 8

    expression  go to state 13
    literal     go to state 12


State 2

   13 literal: INT_LITERAL .

    $default  reduce using rule 13 (literal)


State 3

   14 literal: FLOAT_LITERAL .

    $default  reduce using rule 14 (literal)


State 4

   15 literal: BOOL_LITERAL .

    $default  reduce using rule 15 (literal)


State 5

    5 expression: TOK_OPEN_BRACKET . expression TOK_CLOSE_BRACKET

    TOK_NOT           shift, and go to state 1
    INT_LITERAL       shift, and go to state 2
    FLOAT_LITERAL     shift, and go to state 3
    BOOL_LITERAL      shift, and go to state 4
    TOK_OPEN_BRACKET  shift, and go to state 5
    IDENTIFIER        shift, and go to state 6
    STRING_LITERAL    shift, and go to state 7
    CHAR_LITERAL      shift, and go to state 8

    expression  go to state 14
    literal     go to state 12


State 6

    3 expression: IDENTIFIER .

    $default  reduce using rule 3 (expression)


State 7

   16 literal: STRING_LITERAL .

    $default  reduce using rule 16 (literal)


State 8

   17 literal: CHAR_LITERAL .

    $default  reduce using rule 17 (literal)


State 9

    2 input: ERROR .

    $default  reduce using rule 2 (input)


State 10

    0 $accept: input . $end

    $end  shift, and go to state 15


State 11

    1 input: expression .
    6 expression: expression . TOK_PLUS expression
    7           | expression . TOK_MINUS expression
    8           | expression . TOK_MULTIPLY expression
    9           | expression . TOK_DIVIDE expression
   10           | expression . TOK_MODULO expression
   12           | expression . TOK_POW expression

    TOK_PLUS      shift, and go to state 16
    TOK_MINUS     shift, and go to state 17
    TOK_MULTIPLY  shift, and go to state 18
    TOK_DIVIDE    shift, and go to state 19
    TOK_MODULO    shift, and go to state 20
    TOK_POW       shift, and go to state 21

    $default  reduce using rule 1 (input)


State 12

    4 expression: literal .

    $default  reduce using rule 4 (expression)


State 13

    6 expression: expression . TOK_PLUS expression
    7           | expression . TOK_MINUS expression
    8           | expression . TOK_MULTIPLY expression
    9           | expression . TOK_DIVIDE expression
   10           | expression . TOK_MODULO expression
   11           | TOK_NOT expression .
   12           | expression . TOK_POW expression

    $default  reduce using rule 11 (expression)


State 14

    5 expression: TOK_OPEN_BRACKET expression . TOK_CLOSE_BRACKET
    6           | expression . TOK_PLUS expression
    7           | expression . TOK_MINUS expression
    8           | expression . TOK_MULTIPLY expression
    9           | expression . TOK_DIVIDE expression
   10           | expression . TOK_MODULO expression
   12           | expression . TOK_POW expression

    TOK_PLUS           shift, and go to state 16
    TOK_MINUS          shift, and go to state 17
    TOK_MULTIPLY       shift, and go to state 18
    TOK_DIVIDE         shift, and go to state 19
    TOK_MODULO         shift, and go to state 20
    TOK_POW            shift, and go to state 21
    TOK_CLOSE_BRACKET  shift, and go to state 22


State 15

    0 $accept: input $end .

    $default  accept


State 16

    6 expression: expression TOK_PLUS . expression

    TOK_NOT           shift, and go to state 1
    INT_LITERAL       shift, and go to state 2
    FLOAT_LITERAL     shift, and go to state 3
    BOOL_LITERAL      shift, and go to state 4
    TOK_OPEN_BRACKET  shift, and go to state 5
    IDENTIFIER        shift, and go to state 6
    STRING_LITERAL    shift, and go to state 7
    CHAR_LITERAL      shift, and go to state 8

    expression  go to state 23
    literal     go to state 12


State 17

    7 expression: expression TOK_MINUS . expression

    TOK_NOT           shift, and go to state 1
    INT_LITERAL       shift, and go to state 2
    FLOAT_LITERAL     shift, and go to state 3
    BOOL_LITERAL      shift, and go to state 4
    TOK_OPEN_BRACKET  shift, and go to state 5
    IDENTIFIER        shift, and go to state 6
    STRING_LITERAL    shift, and go to state 7
    CHAR_LITERAL      shift, and go to state 8

    expression  go to state 24
    literal     go to state 12


State 18

    8 expression: expression TOK_MULTIPLY . expression

    TOK_NOT           shift, and go to state 1
    INT_LITERAL       shift, and go to state 2
    FLOAT_LITERAL     shift, and go to state 3
    BOOL_LITERAL      shift, and go to state 4
    TOK_OPEN_BRACKET  shift, and go to state 5
    IDENTIFIER        shift, and go to state 6
    STRING_LITERAL    shift, and go to state 7
    CHAR_LITERAL      shift, and go to state 8

    expression  go to state 25
    literal     go to state 12


State 19

    9 expression: expression TOK_DIVIDE . expression

    TOK_NOT           shift, and go to state 1
    INT_LITERAL       shift, and go to state 2
    FLOAT_LITERAL     shift, and go to state 3
    BOOL_LITERAL      shift, and go to state 4
    TOK_OPEN_BRACKET  shift, and go to state 5
    IDENTIFIER        shift, and go to state 6
    STRING_LITERAL    shift, and go to state 7
    CHAR_LITERAL      shift, and go to state 8

    expression  go to state 26
    literal     go to state 12


State 20

   10 expression: expression TOK_MODULO . expression

    TOK_NOT           shift, and go to state 1
    INT_LITERAL       shift, and go to state 2
    FLOAT_LITERAL     shift, and go to state 3
    BOOL_LITERAL      shift, and go to state 4
    TOK_OPEN_BRACKET  shift, and go to state 5
    IDENTIFIER        shift, and go to state 6
    STRING_LITERAL    shift, and go to state 7
    CHAR_LITERAL      shift, and go to state 8

    expression  go to state 27
    literal     go to state 12


State 21

   12 expression: expression TOK_POW . expression

    TOK_NOT           shift, and go to state 1
    INT_LITERAL       shift, and go to state 2
    FLOAT_LITERAL     shift, and go to state 3
    BOOL_LITERAL      shift, and go to state 4
    TOK_OPEN_BRACKET  shift, and go to state 5
    IDENTIFIER        shift, and go to state 6
    STRING_LITERAL    shift, and go to state 7
    CHAR_LITERAL      shift, and go to state 8

    expression  go to state 28
    literal     go to state 12


State 22

    5 expression: TOK_OPEN_BRACKET expression TOK_CLOSE_BRACKET .

    $default  reduce using rule 5 (expression)


State 23

    6 expression: expression . TOK_PLUS expression
    6           | expression TOK_PLUS expression .
    7           | expression . TOK_MINUS expression
    8           | expression . TOK_MULTIPLY expression
    9           | expression . TOK_DIVIDE expression
   10           | expression . TOK_MODULO expression
   12           | expression . TOK_POW expression

    TOK_MULTIPLY  shift, and go to state 18
    TOK_DIVIDE    shift, and go to state 19
    TOK_MODULO    shift, and go to state 20
    TOK_POW       shift, and go to state 21

    $default  reduce using rule 6 (expression)


State 24

    6 expression: expression . TOK_PLUS expression
    7           | expression . TOK_MINUS expression
    7           | expression TOK_MINUS expression .
    8           | expression . TOK_MULTIPLY expression
    9           | expression . TOK_DIVIDE expression
   10           | expression . TOK_MODULO expression
   12           | expression . TOK_POW expression

    TOK_MULTIPLY  shift, and go to state 18
    TOK_DIVIDE    shift, and go to state 19
    TOK_MODULO    shift, and go to state 20
    TOK_POW       shift, and go to state 21

    $default  reduce using rule 7 (expression)


State 25

    6 expression: expression . TOK_PLUS expression
    7           | expression . TOK_MINUS expression
    8           | expression . TOK_MULTIPLY expression
    8           | expression TOK_MULTIPLY expression .
    9           | expression . TOK_DIVIDE expression
   10           | expression . TOK_MODULO expression
   12           | expression . TOK_POW expression

    TOK_POW  shift, and go to state 21

    $default  reduce using rule 8 (expression)


State 26

    6 expression: expression . TOK_PLUS expression
    7           | expression . TOK_MINUS expression
    8           | expression . TOK_MULTIPLY expression
    9           | expression . TOK_DIVIDE expression
    9           | expression TOK_DIVIDE expression .
   10           | expression . TOK_MODULO expression
   12           | expression . TOK_POW expression

    TOK_POW  shift, and go to state 21

    $default  reduce using rule 9 (expression)


State 27

    6 expression: expression . TOK_PLUS expression
    7           | expression . TOK_MINUS expression
    8           | expression . TOK_MULTIPLY expression
    9           | expression . TOK_DIVIDE expression
   10           | expression . TOK_MODULO expression
   10           | expression TOK_MODULO expression .
   12           | expression . TOK_POW expression

    TOK_POW  shift, and go to state 21

    $default  reduce using rule 10 (expression)


State 28

    6 expression: expression . TOK_PLUS expression
    7           | expression . TOK_MINUS expression
    8           | expression . TOK_MULTIPLY expression
    9           | expression . TOK_DIVIDE expression
   10           | expression . TOK_MODULO expression
   12           | expression . TOK_POW expression
   12           | expression TOK_POW expression .

    TOK_POW  shift, and go to state 21

    $default  reduce using rule 12 (expression)
