%{
#include <cmath>
#include <cstdio>
#include <string>
#include <map>
#include "astClasses.hpp"
using namespace slang_AST_NODES;
using std::string;
Operators *programm;
std::map<string,Function*> declaredFunctions;
int yylex(void);
extern FILE *parserOut;
extern int currentLine;
void yyerror(const char *msg) {
	fprintf(stderr, "\x1b[31m[ BISON ERROR] %s in line #%d\n\x1b[0m",msg, currentLine);
}
%}
%locations
%debug
%define api.value.type {struct YYSTYPE {
	int intV;
	double doubleV;
	string strV;
	char charV;
	unsigned char boolV; // unsigned char used without bool for c-compability
	slang_AST_NODES::Operator *oper;
	slang_AST_NODES::Expression *expr;
	slang_AST_NODES::Operators *opers;
	slang_AST_NODES::Function *func;
	std::vector<slang_AST_NODES::Identifier*> vectIdentifier;
	std::vector<slang_AST_NODES::Expression*> vectExpr;
}}
%right TOK_ASSIGN
%left TOK_EQ TOK_NEQ
%left TOK_GR TOK_GRE TOK_LE TOK_LEE
%left TOK_PLUS TOK_MINUS
%left TOK_MULTIPLY TOK_DIVIDE TOK_MODULO
%right TOK_POW
%right TOK_NOT
%token INT_LITERAL FLOAT_LITERAL BOOL_LITERAL TOK_OPEN_BRACKET TOK_CLOSE_BRACKET
%token <strV> IDENTIFIER 
%token STRING_LITERAL CHAR_LITERAL TOK_OPEN_BRACE TOK_CLOSE_BRACE TOK_SEMICOLON
%token TOK_IF TOK_ELSE TOK_COLON TOK_WHILE TOK_FOR TOK_FUNC TOK_RETURN TOK_COMMA
%start input
%%
input: operators {
	programm = $<opers>1;
}
input: func_definition operators {
	programm = $<opers>1;
}
operators: operators operator {
	$<opers>1->push_back($<oper>2);
	$<opers>$ = $<opers>1;
}
operators: operator {
	$<opers>$ = new Operators();
	$<opers>$->push_back($<oper>1);
}
operator: expression TOK_SEMICOLON {
	$<oper>$ = new OpExpression($<expr>1);
}
operator: TOK_RETURN expression TOK_SEMICOLON {
	$<oper>$ = new OpReturn($<expr>2);
}
operator: if_statement {
	$<oper>$ = $<oper>1;
}
operator: while_loop {
	$<oper>$ = $<oper>1;
} 
operator: for_loop {
	$<oper>$ = $<oper>1;
}
operator: TOK_OPEN_BRACE operators TOK_CLOSE_BRACE {
	$<oper>$ = $<oper>2;
}
expression: IDENTIFIER {
	$<expr>$ = new Identifier($<strV>1);
}
expression : literal {
	$<expr>$ = $<expr>1;
}
expression: TOK_OPEN_BRACKET expression TOK_CLOSE_BRACKET {
	$<expr>$ = $<expr>2;
}
expression: expression TOK_PLUS expression {
	$<expr>$ = new BinaryOperation(BinaryOperation::ADDITION, $<expr>1, $<expr>3);
}
expression: expression TOK_MINUS expression {
	$<expr>$ = new BinaryOperation(BinaryOperation::SUBTRACTION, $<expr>1, $<expr>3);
}
expression: expression TOK_MULTIPLY expression {
	$<expr>$ = new BinaryOperation(BinaryOperation::MULTIPLICATION, $<expr>1, $<expr>3);
}
expression: expression TOK_DIVIDE expression {
	$<expr>$ = new BinaryOperation(BinaryOperation::DIVISION, $<expr>1, $<expr>3);
}
expression: expression TOK_MODULO expression {
	$<expr>$ = new BinaryOperation(BinaryOperation::MODULO, $<expr>1, $<expr>3);
}
expression: TOK_NOT expression {
	$<strV>$ = " not " + $<strV>2;
	fprintf(parserOut, "[ INSTRUCTION ] logical invertion\n");
}
expression: expression TOK_POW expression {
	$<expr>$ = new BinaryOperation(BinaryOperation::POW, $<expr>1, $<expr>3);
}
expression: func_call
expression: IDENTIFIER TOK_ASSIGN expression {
	$<expr>$ = new BinaryOperation(BinaryOperation::ASSIGN, $<expr>1, $<expr>3);
}
expression: expression TOK_EQ expression {
	$<expr>$ = new BinaryOperation(BinaryOperation::EQUAL, $<expr>1, $<expr>3);
}
expression: expression TOK_NEQ expression {
	$<expr>$ = new BinaryOperation(BinaryOperation::NON_EQUAL, $<expr>1, $<expr>3);
}
expression: expression TOK_GR expression {
	$<expr>$ = new BinaryOperation(BinaryOperation::GREAT, $<expr>1, $<expr>3);
}
expression: expression TOK_GRE expression {
	$<expr>$ = new BinaryOperation(BinaryOperation::GREAT_EQUAL, $<expr>1, $<expr>3);
}
expression: expression TOK_LE expression {
	$<expr>$ = new BinaryOperation(BinaryOperation::LEAST, $<expr>1, $<expr>3);
}
expression: expression TOK_LEE expression {
	$<expr>$ = new BinaryOperation(BinaryOperation::LEAST_EQUAL, $<expr>1, $<expr>3);
}
%type <oper> if_statement;
if_statement: TOK_IF expression operator {
	$$ = new OpIF($<expr>2, $<oper>3, nullptr);
}
if_statement: TOK_IF expression operator TOK_ELSE operator {
	$$ = new OpIF($<expr>2, $<oper>3, $<oper>5);
}
%type <oper> while_loop;
while_loop: TOK_WHILE expression operator {
	$$ = new WhileLoop($<expr>2, $<oper>3);
}
%type <oper> for_loop;
for_loop: TOK_FOR TOK_OPEN_BRACKET expression[fExp] TOK_SEMICOLON expression[sExp] TOK_SEMICOLON expression[tExp] TOK_SEMICOLON TOK_CLOSE_BRACKET operator[body]{
	$$ = new ForLoop($<expr>fExp, $<expr>sExp, $<expr>tExp, $<oper>body);
}
func_definition: TOK_FUNC IDENTIFIER[name] TOK_OPEN_BRACKET parameters_list_definition[parameters] TOK_CLOSE_BRACKET operator[body] {
	declaredFunctions.insert({$name, new Function($name, $parameters, $<oper>body)});
}
%type <vectIdentifier> parameters_list_definition;
parameters_list_definition: {
	$$ = {};
}
parameters_list_definition: IDENTIFIER {
	$$.push_back(new Identifier($1));
}
parameters_list_definition: parameters_list_definition TOK_COMMA IDENTIFIER[parameterName] {
	$$ = $1;
	$$.push_back(new Identifier($parameterName));
}
%type <expr> func_call;
func_call: IDENTIFIER[name] TOK_OPEN_BRACKET actual_arguments_list[args] TOK_CLOSE_BRACKET {
	$$ = new FunctionCall($name, $args);
}
%type <vectExpr> actual_arguments_list;
actual_arguments_list: {
	$$ = {};
}
actual_arguments_list: expression {
	$$.push_back($<expr>1);
}
actual_arguments_list: actual_arguments_list TOK_COMMA expression[expr] {
	$$ = $1;
	$$.push_back($<expr>expr);
}
literal: INT_LITERAL
literal: FLOAT_LITERAL
literal: BOOL_LITERAL
literal: STRING_LITERAL
literal: CHAR_LITERAL
